// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	user "homework10/internal/entities/user"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, _a1
func (_m *Repository) CreateUser(ctx context.Context, _a1 *user.User) (int64, error) {
	ret := _m.Called(ctx, _a1)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) (int64, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.User) int64); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.User) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *Repository) GetUser(ctx context.Context, id int64) (*user.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*user.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *user.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNick provides a mock function with given fields: ctx, id, nick
func (_m *Repository) UpdateNick(ctx context.Context, id int64, nick string) (*user.User, error) {
	ret := _m.Called(ctx, id, nick)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*user.User, error)); ok {
		return rf(ctx, id, nick)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *user.User); ok {
		r0 = rf(ctx, id, nick)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, nick)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: ctx, id, pass
func (_m *Repository) UpdatePassword(ctx context.Context, id int64, pass string) (*user.User, error) {
	ret := _m.Called(ctx, id, pass)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*user.User, error)); ok {
		return rf(ctx, id, pass)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *user.User); ok {
		r0 = rf(ctx, id, pass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, pass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
