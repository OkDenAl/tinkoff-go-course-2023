// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	ads "homework10/internal/entities/ads"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddAd provides a mock function with given fields: ctx, ad
func (_m *Repository) AddAd(ctx context.Context, ad *ads.Ad) (int64, error) {
	ret := _m.Called(ctx, ad)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ads.Ad) (int64, error)); ok {
		return rf(ctx, ad)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ads.Ad) int64); ok {
		r0 = rf(ctx, ad)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ads.Ad) error); ok {
		r1 = rf(ctx, ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: ctx, adId
func (_m *Repository) DeleteAd(ctx context.Context, adId int64) error {
	ret := _m.Called(ctx, adId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, adId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdById provides a mock function with given fields: ctx, adId
func (_m *Repository) GetAdById(ctx context.Context, adId int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, adId)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*ads.Ad, error)); ok {
		return rf(ctx, adId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ads.Ad); ok {
		r0 = rf(ctx, adId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, adId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdsByTitle provides a mock function with given fields: ctx, title
func (_m *Repository) GetAdsByTitle(ctx context.Context, title string) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, title)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*ads.Ad, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*ads.Ad); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, filters
func (_m *Repository) GetAll(ctx context.Context, filters ads.Filters) ([]*ads.Ad, error) {
	ret := _m.Called(ctx, filters)

	var r0 []*ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ads.Filters) ([]*ads.Ad, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ads.Filters) []*ads.Ad); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ads.Filters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdStatus provides a mock function with given fields: ctx, adId, newStatus
func (_m *Repository) UpdateAdStatus(ctx context.Context, adId int64, newStatus bool) (*ads.Ad, error) {
	ret := _m.Called(ctx, adId, newStatus)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) (*ads.Ad, error)); ok {
		return rf(ctx, adId, newStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool) *ads.Ad); ok {
		r0 = rf(ctx, adId, newStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, bool) error); ok {
		r1 = rf(ctx, adId, newStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdTitleAndText provides a mock function with given fields: ctx, adId, newTitle, newText
func (_m *Repository) UpdateAdTitleAndText(ctx context.Context, adId int64, newTitle string, newText string) (*ads.Ad, error) {
	ret := _m.Called(ctx, adId, newTitle, newText)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (*ads.Ad, error)); ok {
		return rf(ctx, adId, newTitle, newText)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) *ads.Ad); ok {
		r0 = rf(ctx, adId, newTitle, newText)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, adId, newTitle, newText)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
