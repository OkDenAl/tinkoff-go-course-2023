// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"
	user "homework10/internal/entities/user"

	mock "github.com/stretchr/testify/mock"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// ChangeNickname provides a mock function with given fields: ctx, id, nickname
func (_m *App) ChangeNickname(ctx context.Context, id int64, nickname string) (*user.User, error) {
	ret := _m.Called(ctx, id, nickname)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*user.User, error)); ok {
		return rf(ctx, id, nickname)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *user.User); ok {
		r0 = rf(ctx, id, nickname)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, nickname)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, nickname, email, password
func (_m *App) CreateUser(ctx context.Context, nickname string, email string, password string) (*user.User, error) {
	ret := _m.Called(ctx, nickname, email, password)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*user.User, error)); ok {
		return rf(ctx, nickname, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *user.User); ok {
		r0 = rf(ctx, nickname, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, nickname, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *App) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *App) GetUser(ctx context.Context, id int64) (*user.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*user.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *user.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: ctx, id, password
func (_m *App) UpdatePassword(ctx context.Context, id int64, password string) (*user.User, error) {
	ret := _m.Called(ctx, id, password)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*user.User, error)); ok {
		return rf(ctx, id, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *user.User); ok {
		r0 = rf(ctx, id, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApp(t mockConstructorTestingTNewApp) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
